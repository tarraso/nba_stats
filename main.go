package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	_ "nba_stats/docs" // docs is generated by Swag CLI, you have to import it.

	"log"
	"net/http"

	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	httpSwagger "github.com/swaggo/http-swagger"
)

// In-memory storage for simplicity
var players = []Player{
	{ID: 1, Name: "LeBron James", Team: "Lakers"},
	{ID: 2, Name: "Stephen Curry", Team: "Warriors"},
}

var gameStats = []GameStat{}

// @title NBA Stats API
// @version 0.1
// @description This is a sample server for logging NBA player statistics.

// @contact.name API Support

// @host localhost:8080
// @BasePath /

// Handler to log game statistics
// @Summary Log game statistics
// @Description Log the statistics of a player in a game
// @Accept  json
// @Produce  json
// @Param   stat  body    GameStat  true  "GameStat"
// @Success 200 {string} string "Game stat logged successfully!"
// @Failure 400 {string} string "Bad request"
// @Router /game-stat [post]
func gameStatHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var newStat GameStat
	err := json.NewDecoder(r.Body).Decode(&newStat)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = ValidateGameStat(newStat)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	gameStats = append(gameStats, newStat)
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "Game stat logged successfully!")
}

// Handler to list players
// @Summary List players
// @Description Get the list of players
// @Produce  json
// @Success 200 {array} Player
// @Router /players [get]
func listPlayersHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(players)
}

// Handler to list game statistics
// @Summary List game statistics
// @Description Get the list of game statistics
// @Produce  json
// @Success 200 {array} GameStat
// @Router /game-stats [get]
func listGameStatsHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(gameStats)
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file")
	}
	cfg := LoadConfig()

	var db *sql.DB
	db, err = InitDB(cfg)
	if err != nil {
		log.Fatalf("Could not connect to the database: %v\n", err)
	}
	defer db.Close()

	runMigrations(db, cfg)

	http.HandleFunc("/game-stat", gameStatHandler)
	http.HandleFunc("/players", listPlayersHandler)
	http.HandleFunc("/game-stats", listGameStatsHandler)
	http.HandleFunc("/swagger/", httpSwagger.WrapHandler)

	fmt.Println("Server running on port 8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func runMigrations(db *sql.DB, cfg Config) {
	driver, err := postgres.WithInstance(db, &postgres.Config{})
	if err != nil {
		log.Fatalf("Could not create migration driver: %v\n", err)
	}

	m, err := migrate.NewWithDatabaseInstance(
		"file://migrations",
		cfg.DBName, driver)
	if err != nil {
		log.Fatalf("Could not create migrate instance: %v\n", err)
	}

	if err := m.Up(); err != nil && err != migrate.ErrNoChange {
		log.Fatalf("Could not run up migrations: %v\n", err)
	}

	log.Println("Migrations applied successfully!")
}
